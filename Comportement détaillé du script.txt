// Jack-Josias ‚Äì Cr√©ateur du projet
// Documentation mise √† jour pour la v3.5 (Architecture Modulaire)

## üîç Comportement d√©taill√© du script

Le script fonctionne d√©sormais selon une architecture modulaire qui s√©pare clairement les responsabilit√©s pour plus de robustesse et de clart√©.

### ü§ñ Flux d'Ex√©cution

Supposons le lancement de la commande suivante :
`python codebase_extractor.py ./MonProjet -o rapport --format txt,md`

1.  **Phase 1 : Interface CLI (`codebase_extractor.py`)**
    *   Le script principal re√ßoit les arguments : le chemin `./MonProjet`, le nom de base `rapport`, et les formats `txt,md`.
    *   Il ne contient plus la logique m√©tier. Son r√¥le est d'orchestrer les autres modules.
    *   Il instancie le moteur principal : `extractor = CodebaseExtractor(...)`.
    *   Il appelle la m√©thode d'extraction : `extractor.extract_codebase(...)`.

2.  **Phase 2 : Moteur d'Extraction (`src/core.py`)**
    *   La classe `CodebaseExtractor` prend le contr√¥le.
    *   **Normalisation :** Le chemin `./MonProjet` est converti en un chemin absolu.
    *   **Analyse `.gitignore` :** Le moteur recherche un fichier `.gitignore` √† la racine de `MonProjet` et charge ses r√®gles.
    *   **Parcours R√©cursif :** Il scanne tous les dossiers et fichiers de `MonProjet`, en appliquant les filtres (r√®gles de base + `.gitignore`).
    *   **Collecte :** Il dresse la liste de tous les fichiers de code pertinents √† extraire.
    *   **Extraction Parall√®le :** Il lance plusieurs threads pour lire le contenu de tous les fichiers collect√©s simultan√©ment, pour une vitesse maximale.
    *   **Pr√©paration des Donn√©es :** Il assemble toutes les informations (statistiques, arborescence, contenu des fichiers) dans une structure de donn√©es unique (`report_data`).

3.  **Phase 3 : Moteur de Rendu (`src/renderers/`)**
    *   Le moteur d'extraction transmet la structure `report_data` aux modules de rendu demand√©s.
    *   `txt_renderer.py` prend les donn√©es et g√©n√®re le contenu du fichier `rapport.txt`.
    *   `md_renderer.py` prend les m√™mes donn√©es et g√©n√®re le contenu du fichier `rapport.md`.
    *   Chaque renderer est sp√©cialis√© dans un seul format, ce qui rend l'ajout de nouveaux formats (ex: XML) tr√®s simple.

4.  **Phase 4 : √âcriture et Post-Traitement (`codebase_extractor.py`)**
    *   Le script principal r√©cup√®re le contenu g√©n√©r√© par chaque renderer et l'√©crit dans les fichiers correspondants.
    *   Si le mode interactif est activ√©, il peut faire appel √† `src/utils.py` pour proposer la compression du rapport en une seule ligne.

### ‚úÖ Ce que fait le script (R√©sum√©) :

1.  **Orchestration Claire :** Le script principal dirige le flux.
2.  **Logique Centralis√©e :** Le module `core` g√®re toute la logique d'extraction.
3.  **Rendu Sp√©cialis√© :** Le module `renderers` s'occupe de la mise en forme de la sortie.
4.  **Utilitaires Isol√©s :** Le module `utils` fournit des fonctions annexes.
5.  **Extraction TOTALE et Parall√®le :** R√©cup√®re le contenu de TOUS les fichiers pertinents √† haute vitesse.
6.  **Intelligence d'Exclusion :** Ignore automatiquement les dossiers inutiles via des r√®gles de base et le support de `.gitignore`.

### üöÄ Avantages de la nouvelle architecture :

*   **Maintenabilit√© :** Corriger un bug de rendu ne risque plus de casser la logique de parcours de fichiers.
*   **Testabilit√© :** Chaque module peut √™tre test√© de mani√®re ind√©pendante.
*   **√âvolutivit√© :** Ajouter un nouveau format de rapport se r√©sume √† cr√©er un nouveau fichier dans `src/renderers/`.
*   **Clart√© :** Le code est plus facile √† lire et √† comprendre pour les nouveaux contributeurs.

---
**Document r√©dig√© et maintenu par Jack-Josias (2025)**
