// Jack-Josias ‚Äì Cr√©ateur du projet
// Documentation mise √† jour pour la v3.5 (Architecture Modulaire)

# üéØ GUIDE COMPLET D'UTILISATION - CodeBase Extractor v3.5

Ce guide couvre tous les cas d'usage avec des exemples concrets, en tenant compte des derni√®res fonctionnalit√©s.

## üìã Pr√©paration

1.  **T√©l√©charger le projet** et conserver sa structure de dossiers.
2.  **Ouvrir un terminal/console**.
3.  **Naviguer vers le dossier du projet** : `cd /chemin/vers/CodeBase-Extractor`

---
## üé™ CAS D'USAGE FONDAMENTAUX

### #1 : Analyser un projet
Vous voulez extraire tout le code d'un projet.
```bash
# Analyser un projet qui se trouve ailleurs
python3 codebase_extractor.py /chemin/vers/mon/projet

# Analyser le projet courant (si vous √™tes dans le dossier de votre projet)
# Note: vous devez fournir le chemin complet vers le script
python3 /chemin/vers/CodeBase-Extractor/codebase_extractor.py .
```
**R√©sultat :** Un fichier `.txt` est g√©n√©r√© avec un nom automatique.



### #2 : Nom de fichier et format personnalis√©s
Vous voulez contr√¥ler la sortie.
```bash
# Nom personnalis√© et format Markdown
python3 codebase_extractor.py . -o rapport_projet --format md

# Plusieurs formats en une seule fois
python3 codebase_extractor.py . -o rapport_projet --format txt,json,html
```
**R√©sultat :** Fichiers `rapport_projet.md`, `rapport_projet.txt`, `rapport_projet.json`, `rapport_projet.html` g√©n√©r√©s.



### #3 : Extraction de plusieurs dossiers simultan√©ment
Vous voulez combiner le contenu de plusieurs parties de votre projet.
```bash
python3 codebase_extractor.py ./frontend ./backend -o rapport_complet.txt
```
**R√©sultat :** Un seul rapport contenant l'arborescence et le contenu des deux dossiers.


**Exemple avec des chemins absolus g√©n√©riques et des fichiers sp√©cifiques :**
```bash
python3 codebase_extractor.py '/chemin/vers/mon/projet/bin/' '/chemin/vers/mon/projet/config/' '/chemin/vers/mon/projet/src/main.py' -o rapport_personnalise.txt
```
**R√©sultat :** Un rapport unique `rapport_personnalise.txt` incluant le contenu des dossiers et fichiers sp√©cifi√©s par leurs chemins absolus g√©n√©riques.

---
## üöÄ CAS D'USAGE AVANC√âS



### #4 : Pr√©paration pour IA / LLM (Chunking)
Votre projet est volumineux et vous voulez le fournir √† une IA qui a une limite de contexte.
```bash
# D√©couper le projet en morceaux de 4000 caract√®res
python3 codebase_extractor.py /chemin/vers/projet --chunk-size 4000 -o projet_pour_claude
```
**R√©sultat :** Une s√©rie de fichiers `projet_pour_claude_chunk_1.txt`, `projet_pour_claude_chunk_2.txt`, etc.



### #5 : Utilisation en Scripting / Int√©gration Continue (CI/CD)
Vous voulez automatiser l'extraction sans interaction humaine.
```bash
# Le flag --no-interactive emp√™che toute question
python3 codebase_extractor.py . -o rapport_ci --no-interactive

# Le flag --force outrepasse les avertissements de s√©curit√©
python3 codebase_extractor.py . -o rapport_audit --force --no-interactive
```



### #6 : Exclusions personnalis√©es
Vous voulez ignorer des fichiers ou dossiers sp√©cifiques en plus du `.gitignore`.
```bash
# Ignorer les fichiers de backup et les dossiers de test
python3 codebase_extractor.py . --ignore-patterns "*.bak,*.tmp,tests/"
```



### #7 : Compression pour IA
Vous voulez une version du rapport sur une seule ligne, facile √† copier-coller.
```bash
# Option 1: Automatique (si le mode interactif est activ√©)
python3 codebase_extractor.py . -o rapport.txt
# Le script demandera : "Voulez-vous cr√©er une version compress√©e... ? (y/n)"

# Option 2: Forc√©e (pour les scripts)
python3 codebase_extractor.py . -o rapport.txt --oneline
```
**R√©sultat :** Un fichier suppl√©mentaire `rapport.oneline.txt` sera cr√©√©.

---
## üí° WORKFLOWS TYPIQUES

### Audit de code
1.  `python3 codebase_extractor.py /projet/client -o audit_client --format md,txt --force`
2.  Analyser le `audit_client.md` pour une vue d'ensemble.
3.  Utiliser le `audit_client.txt` pour des analyses textuelles ou avec d'autres outils.

### Onboarding d'un nouveau d√©veloppeur
1.  `python3 codebase_extractor.py . -o doc_projet --format html`
2.  Partager le fichier `doc_projet.html` qui offre une vue navigable et facile √† lire de toute la codebase.

### Session de d√©bug √† distance
1.  `python3 codebase_extractor.py ./src -o debug_session.txt`
2.  Envoyer le fichier `debug_session.txt` √† un coll√®gue pour qu'il ait le contexte complet du code concern√©.

---
## üéØ R√âSUM√â DES COMMANDES ESSENTIELLES

```bash
# Basique
python3 codebase_extractor.py <chemin>

# Avec nom et format
python3 codebase_extractor.py <chemin> -o <nom_sortie> --format <formats>

# Pour IA (gros projets)
python3 codebase_extractor.py <chemin> --chunk-size 4000

# Pour scripts automatis√©s
python3 codebase_extractor.py <chemin> --no-interactive --force
```

Avec cette version modulaire, le script est plus robuste et pr√™t √† √©voluer pour de futurs cas d'usage !

---
**Guide r√©dig√© et maintenu par Jack-Josias (2025)**
